#!/usr/bin/env ruby
#
# yaml2po, for converting RoR translation YAML to the standard gettext for
#          eventual use with a translation site such as Transifex or a CAT tool
#
# Developed from scripts found in http://git.openstreetmap.org/rails.git/tree/HEAD:/script/locale
#
# Usage:
#  - To create a 'master' .pot
#    yaml2po -P en.yml > translations.pot
#
#  - To create a language's .po
#    yaml2po -l de -t en.yml de.yml > de.po
#
# TODO put a license and copyright notice (check first the license of the original code!!!)

require "yaml"
require "optparse"

LOCALE_DIR = File.dirname(__FILE__) + '/'


def iterate(hash, fhash={}, path='', outfile=$stdout)
    postr = ''
    hash.each {|key, val|
    fhash[key] = {} unless fhash.has_key? key
    if val.is_a? Hash
        fhash[key] = {} unless fhash[key].is_a? Hash
        iterate(val, fhash[key], path+key+':', outfile)
    else
        outfile.puts ""
        outfile.puts "msgctxt \"#{path}#{key}\""
        # TODO make it to escape the " characters both in msgid and msgstr
        # TODO make it to escape the \ characters which are not escaping other characters both in msgid and msgstr
        # TODO make it to correctly output multiline strings both in msgid and msgstr
        outfile.puts "msgid \"#{val}\""
        outfile.puts "msgstr \"#{fhash[key]}\""
    end
    }
end


def print_header(lang='LANGUAGE', outfile=$stdout)
    outfile.puts '# SOME DESCRIPTIVE TITLE.'
    outfile.puts '# Copyright (C) YEAR THE PACKAGE\'S COPYRIGHT HOLDER'
    outfile.puts '# This file is distributed under the same license as the PACKAGE package.'
    outfile.puts '# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.'
    outfile.puts '#'
    if lang == 'LANGUAGE'
        outfile.puts '#, fuzzy'
    end
    outfile.puts 'msgid ""'
    outfile.puts 'msgstr ""'
    outfile.puts '"Project-Id-Version: PACKAGE VERSION\n"'
    outfile.puts '"Report-Msgid-Bugs-To: \n"'
    outfile.puts '"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"'
    outfile.puts '"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"'
    outfile.puts '"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"'
    outfile.puts '"Language-Team: ' + lang + ' <LL@li.org>\n"'
    outfile.puts '"MIME-Version: 1.0\n"'
    outfile.puts '"Content-Type: text/plain; charset=UTF-8\n"'
    outfile.puts '"Content-Transfer-Encoding: 8bit\n"'
    outfile.puts '"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"'
end


def lang2po(lang, sourcefile, langfile, outfile=$stdout)
    engfile = LOCALE_DIR+sourcefile
    if File.exists? engfile
        infile = LOCALE_DIR+langfile
        if File.exists? infile
            # Generate the PO file only once checked that both files exist
            eng = YAML::load_file(engfile)
            oth = YAML::load_file(infile)
            oth = oth[lang]
            print_header(lang)
            iterate(eng['en'], oth, '', outfile)
        else
            $stderr.puts("\nError: Specified YAML file \"#{infile}\" does not exist.\n\n")
        end
    else
        $stderr.puts("\nError: Specified YAML file \"#{sourcefile}\" does not exist.\n\n")
    end
end


def generate_pot(sourcefile, outfile=$stdout)
    engfile = LOCALE_DIR+sourcefile
    if File.exists? engfile
        eng = YAML::load_file(engfile)
        print_header()
        iterate(eng['en'], {}, '', outfile)
    else
        $stderr.puts("\nError: Specified YAML file \"#{sourcefile}\" does not exist.\n\n")
    end
end


def print_usage()
    $stderr.puts("\nUsage:\n")
    $stderr.puts("  - To create a 'master' .pot\n")
    $stderr.puts("    yaml2po -P en.yml > translations.pot\n")
    $stderr.puts("\n")
    $stderr.puts("  - To create a language's .po\n")
    $stderr.puts("    yaml2po -l de -t en.yml de.yml > de.po\n\n")
end



opt = ARGV[0]

if opt == '-l'
    # Goes this way when generating a PO file with the translation for a given language
    # TODO check if ARGV[1] exists
    # TODO check if ARGV[3] exists
    # TODO check if ARGV[4] exists
    # TODO allow to specify -o option and an outfile to output to
    lang2po(ARGV[1], ARGV[3], ARGV[4])
elsif opt == '-P'
    # Goes this way when generating a POT file
    # TODO check if ARGV[1] exists
    # TODO allow to specify -o option and an outfile to output to
    generate_pot(ARGV[1])
else
    print_usage()
end


