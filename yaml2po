#!/usr/bin/env ruby
#
# yaml2po, for converting RoR translation YAML to the standard gettext for
#          eventual use with a translation site such as Transifex or a CAT tool
#
# Developed from scripts found in http://git.openstreetmap.org/rails.git/tree/HEAD:/script/locale
#
# Usage:
#  - To create a 'master' .pot
#    yaml2po -P en.yml > translations.pot
#
#  - To create a language's .po
#    yaml2po -l de -t en.yml de.yml > de.po
#
#
# Copyright (C) 2012 Leandro Regueiro <leandro.regueiro AT gmail DOT com>
# Copyright (C) 2009 Thomas Wood
# Copyright (C) 2009 Tom Hughes
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

require "yaml"
require "optparse"

LOCALE_DIR = File.dirname(__FILE__) + '/'


def iterate(hash, fhash={}, path='', outfile=$stdout)
    postr = ''
    hash.each {|key, val|
    fhash[key] = {} unless fhash.has_key? key
    if val.is_a? Hash
        fhash[key] = {} unless fhash[key].is_a? Hash
        iterate(val, fhash[key], path+key+':', outfile)
    else
        outfile.puts("")
        outfile.puts("msgctxt \"#{path}#{key}\"")
        # TODO make it to escape the " characters both in msgid and msgstr
        # TODO make it to escape the \ characters which are not escaping other characters both in msgid and msgstr
        # TODO make it to correctly output multiline strings both in msgid and msgstr
        outfile.puts("msgid \"#{val}\"")
        outfile.puts("msgstr \"#{fhash[key]}\"")
    end
    }
end


def print_header(lang='LANGUAGE', outfile=$stdout)
    outfile.puts('# SOME DESCRIPTIVE TITLE.')
    outfile.puts('# Copyright (C) YEAR THE PACKAGE\'S COPYRIGHT HOLDER')
    outfile.puts('# This file is distributed under the same license as the PACKAGE package.')
    outfile.puts('# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.')
    outfile.puts('#')
    if lang == 'LANGUAGE'
        outfile.puts('#, fuzzy')
    end
    outfile.puts('msgid ""')
    outfile.puts('msgstr ""')
    outfile.puts('"Project-Id-Version: PACKAGE VERSION\n"')
    outfile.puts('"Report-Msgid-Bugs-To: \n"')
    # TODO put today's date
    outfile.puts('"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"')
    # TODO if it is no POT file, put today's date
    outfile.puts('"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"')
    outfile.puts('"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"')
    outfile.puts('"Language-Team: ' + lang + ' <LL@li.org>\n"')
    outfile.puts('"MIME-Version: 1.0\n"')
    outfile.puts('"Content-Type: text/plain; charset=UTF-8\n"')
    outfile.puts('"Content-Transfer-Encoding: 8bit\n"')
    # TODO if it is no POT file, put the corresponding plural string for the given language code
    outfile.puts('"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\n"')
end


def lang2po(lang, sourcefile, langfile, outfile)
    engfile = LOCALE_DIR+sourcefile
    if File.exists? engfile
        infile = LOCALE_DIR+langfile
        if File.exists? infile
            # Generate the PO file only once checked that both files exist
            eng = YAML::load_file(engfile)
            oth = YAML::load_file(infile)
            oth = oth[lang]
            print_header(lang, outfile)
            iterate(eng['en'], oth, '', outfile)
            outfile.close()
        else
            $stderr.puts("\nError: Specified YAML file \"#{infile}\" does not exist.\n\n")
        end
    else
        $stderr.puts("\nError: Specified YAML file \"#{sourcefile}\" does not exist.\n\n")
    end
end


def generate_pot(sourcefile, outfile)
    engfile = LOCALE_DIR+sourcefile
    if File.exists? engfile
        eng = YAML::load_file(engfile)
        print_header('', outfile)
        iterate(eng['en'], {}, '', outfile)
        outfile.close()
    else
        $stderr.puts("\nError: Specified YAML file \"#{sourcefile}\" does not exist.\n\n")
    end
end


def print_usage()
    $stderr.puts("\nUsage:\n")
    $stderr.puts("  - To create a 'master' .pot\n")
    $stderr.puts("    yaml2po -P en.yml file.pot\n")
    $stderr.puts("\n")
    $stderr.puts("  - To create a language's .po\n")
    $stderr.puts("    yaml2po -l de -t en.yml de.yml de.po\n\n")
end



opt = ARGV[0]

if opt == '-l'
    # Goes this way when generating a PO file with the translation for a given language
    if (ARGV.size == 6)
        outfile = File.new(LOCALE_DIR+ARGV[5], "w")
        lang2po(ARGV[1], ARGV[3], ARGV[4], outfile)
        exit
    end
elsif opt == '-P'
    # Goes this way when generating a POT file
    if (ARGV.size == 3)
        outfile = File.new(LOCALE_DIR+ARGV[2], "w")
        generate_pot(ARGV[1], outfile)
        exit
    end
end
print_usage()



